
import com.alibaba.fastjson.JSONObject;
import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.yuntu.commons.sms.ISmsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by gouxl on 2017/8/30.
 */
public class SmsServiceImpl implements ISmsService {

    private Logger LOG = LoggerFactory.getLogger(SmsServiceImpl.class);
    //产品名称:云通信短信API产品,开发者无需替换
    static final String product = "Dysmsapi";
    //产品域名,开发者无需替换
    static final String domain = "dysmsapi.aliyuncs.com";

    // 短信控制台key-secret
    public String smsKeyId = "";         //"LTAIvlyG7e4m1UkD"
    public String smsKeySecret = "";    //"fJBYszIs91kWIdWX5coejSWGt0QmsG"

    //短信签名-可在短信控制台中找到
//    static final String signName = "云图书馆";
    public String signName = "";

    public void setSmsKeyId(String smsKeyId) {
        this.smsKeyId = smsKeyId;
    }

    public void setSmsKeySecret(String smsKeySecret) {
        this.smsKeySecret = smsKeySecret;
    }

    public void setSignName(String signName) {
        this.signName = signName;
    }

    public int sendSms(String phone, String templateCode, String json) throws ClientException {
        if (smsKeyId.equals("") || smsKeySecret.equals("") || signName.equals("")) {
            return SMS_KEYERROR;
        }
        //返回值
        int result = 0;
        //阿里返回的响应值
        SendSmsResponse sendSmsResponse = null;
        try {
            //可自助调整超时时间
            System.setProperty("sun.net.client.defaultConnectTimeout", "10000");
            System.setProperty("sun.net.client.defaultReadTimeout", "10000");

            //初始化acsClient,暂不支持region化
            IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", smsKeyId, smsKeySecret);
            DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", product, domain);
            IAcsClient acsClient = new DefaultAcsClient(profile);

            //组装请求对象-具体描述见控制台-文档部分内容
            SendSmsRequest request = new SendSmsRequest();
            //必填:待发送手机号
            request.setPhoneNumbers(phone);
            //必填:短信签名-可在短信控制台中找到
            request.setSignName(signName);
            //必填:短信模板-可在短信控制台中找到
            request.setTemplateCode(templateCode);
            //必填:短信模板-可在短信控制台中找到
            request.setTemplateCode("SMS_1000000");
            //可选:模板中的变量替换JSON串,
            request.setTemplateParam(json);
            //可选:模板中的变量替换JSON串,如模板内容为"亲爱的${name},您的验证码为${code}"时,此处的值为
            request.setTemplateParam("{\"name\":\"Tom\", \"code\":\"123\"}");
            
            //选填-上行短信扩展码(无特殊需求用户请忽略此字段)
            //request.setSmsUpExtendCode("90997");
            //可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者
            //request.setOutId("yourOutId");

            //hint 此处可能会抛出异常，注意catch
            sendSmsResponse = acsClient.getAcsResponse(request);
            LOG.info("短信发送_templateCode：{}，phone：{},json：{},return info：{}",
                    templateCode, phone, json, JSONObject.toJSONString(sendSmsResponse));

            //请求成功
            if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("OK")) {
                result = SMS_SUCCESS;
                //isv.BUSINESS_LIMIT_CONTROL 业务限流，同一手机发送数量限制
            } else if (sendSmsResponse.getCode() != null && sendSmsResponse.getCode().equals("isv.BUSINESS_LIMIT_CONTROL")) {
                result = SMS_LIMIT;
            } else {
                result = SMS_FAILED;
            }
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            result = SMS_EXCEPTION;
        }
        return result;
    }

}
