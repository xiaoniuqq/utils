
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.yuntu.commons.util.pdf.ImageLogo;


/**
 * Created by zengliliang on 2017/9/13.
 */
public class PdfHelper extends PdfPageEventHelper {
    public PdfTemplate tpl;
    public BaseFont bf;
    private String picPath;



    public PdfHelper() {
    }

    public PdfHelper(String picPath) {
        this.picPath = picPath;
    }

    private static Image getWaterMarkImage(Image waterMarkImage, float xPosition, float yPosition) {
        waterMarkImage.setAbsolutePosition(xPosition, yPosition);// 坐标
        waterMarkImage.setRotation(25);// 旋转 弧度
        waterMarkImage.setRotationDegrees(25);// 旋转 角度
        waterMarkImage.scalePercent(30);// 依照比例缩放
        waterMarkImage.setAlignment(Image.ALIGN_CENTER);
        return waterMarkImage;
    }

    public String getPicPath() {
        return picPath;
    }

    //添加水印

    public void addShuiYin(PdfWriter writer, Document document) {
        //842,595
        float pageWidth = document.right() + document.left();// 获取pdf内容正文页面宽度
        float pageHeight = document.top() + document.bottom();// 获取pdf内容正文页面高度

        PdfContentByte waterMarkPdfContent = writer.getDirectContent();
        Image waterMarkImage = null;
        try {
            waterMarkImage = Image.getInstance(ImageLogo.generateImage());
            // 添加水印图片
            waterMarkPdfContent.addImage(getWaterMarkImage(waterMarkImage,pageWidth*0.7f+50,pageHeight*0.3f));
            waterMarkPdfContent.addImage(getWaterMarkImage(waterMarkImage,pageWidth*0.2f+50,pageHeight*0.3f-40));
            waterMarkPdfContent.addImage(getWaterMarkImage(waterMarkImage,pageWidth*0.7f,pageHeight*0.7f-60));
            waterMarkPdfContent.addImage(getWaterMarkImage(waterMarkImage,pageWidth*0.2f,pageHeight*0.7f-70));
            PdfGState gs = new PdfGState();
            gs.setFillOpacity(0.6f);// 设置透明度
            gs.setStrokeOpacity(0.6f);
            gs.setOverPrintStroking(true);
            waterMarkPdfContent.setGState(gs);
            super.onStartPage(writer, document);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void onOpenDocument(PdfWriter writer, Document document) {
        try {
            tpl = writer.getDirectContent().createTemplate(100, 100);
            bf = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
        } catch (Exception e) {
            throw new ExceptionConverter(e);
        }
    }



    public void onEndPage(PdfWriter writer, Document document) {
        //在每页结束的时候把“第x页”信息写道模版指定位置
        PdfContentByte cb = writer.getDirectContent();
        cb.saveState();
        String text = writer.getPageNumber() + " / ";
        int width = String.valueOf(writer.getPageNumber()).length();
        cb.beginText();
        cb.setFontAndSize(bf, 10);
        Rectangle pageSize = document.getPageSize();
        cb.setTextMatrix(pageSize.getWidth() / 2 - (width * 2) + 2, 20);//定位“第x页,共” 在具体的页面调试时候需要更改这xy的坐标

        cb.endText();
        cb.addTemplate(tpl, (pageSize.getWidth() / 2) + 14, 20);//定位cb.showText(text);“y页” 在具体的页面调试时候需要更改这xy的坐标
        cb.restoreState();
        addShuiYin(writer,document);
        /*
    	 ColumnText.showTextAligned(writer.getDirectContent(),
                 Element.ALIGN_CENTER, new Phrase(String.format(" %d", writer.getPageNumber())),
                 300, 15, 0);
                 */
    }

    public void onCloseDocument(PdfWriter writer, Document document) {
        //关闭document的时候获取总页数，并把总页数按模版写道之前预留的位置

        tpl.beginText();
        tpl.setFontAndSize(bf, 10);
        tpl.setTextMatrix(0, 0);
        tpl.showText(String.valueOf(writer.getPageNumber() - 1));
        tpl.endText();
    }
}
